# This workflow will build a docker container, publish it to IBM Container Registry, and deploy it to IKS when there is a push to the development branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains a Dockerfile
# 2. Setup secrets in your repository by going to settings: Create ICR_NAMESPACE and IBM_CLOUD_API_KEY
# 3. Change the values for the IBM_CLOUD_REGION, REGISTRY_HOSTNAME, IMAGE_NAME, IKS_CLUSTER, DEPLOYMENT_NAME, and PORT

name: Continuous Deployment (IKS)

on:
  push:
    branches:
      - master

# Environment variables available to all jobs and steps in this workflow
env:
  GITHUB_SHA: ${{ github.sha }}
  IBM_CLOUD_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}
#  IBM_CLOUD_REGION: eu-de
  ICR_NAMESPACE: ${{ secrets.ICR_NAMESPACE }}
  REGISTRY_HOSTNAME: icr.io
  IMAGE_NAME: cicd-casestudy-app
  IKS_CLUSTER: ${{ secrets.CLUSTERNAME }}
  DEPLOYMENT_NAME: my-node-app
  PORT: 3000

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    # Download and Install IBM Cloud CLI
    - name: Install IBM Cloud CLI
      run: |
        curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
        ibmcloud --version
        ibmcloud config --check-version=false
        ibmcloud plugin install -f kubernetes-service
        ibmcloud plugin install -f container-registry

    # Authenticate with IBM Cloud CLI
    - name: Authenticate with IBM Cloud CLI
      run: |
        ibmcloud login --apikey "${IBM_CLOUD_API_KEY}" --no-region
        ibmcloud cr login
    
    # Setup the infrastructure via Terraform orchestration
    - name: Setup Terraform
      run: |
        cd terraform
        ibmcloud ks cluster rm -f --cluster ${IKS_CLUSTER}
        terraform init
        terraform plan -out "apply_this.tfplan" -var ibm_cloud_api_key=${IBM_CLOUD_API_KEY} -var namespace=${IMAGE_NAME} -var clustername=${IKS_CLUSTER} -var webhook_to_slack=${{ secrets.WEBHOOK_TO_SLACK }}
        terraform apply "apply_this.tfplan"
        cd ..

    # Build the Docker image
    - name: Build with Docker
      run: |
        cd app
        docker build -f Dockerfile -t "$REGISTRY_HOSTNAME"/"$ICR_NAMESPACE"/"$IMAGE_NAME":"$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" .
        cd ..

    # Push the image to IBM Container Registry
    - name: Push the image to ICR
      run: |
        docker push $REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA

    # Deploy the Docker image to the IKS cluster
    - name: Deploy to IKS
      run: |
          ibmcloud ks cluster config --cluster $IKS_CLUSTER
          kubectl config current-context
          kubectl apply -f deployment.yml
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl apply -f service.yml
          kubectl get services -o wide
      # run: |
      #   ibmcloud ks cluster config --cluster $IKS_CLUSTER
      #   kubectl config current-context
      #   kubectl create deployment $DEPLOYMENT_NAME --image=$REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA --dry-run -o yaml > deployment.yaml
      #   kubectl apply -f deployment.yaml
      #   kubectl rollout status deployment/$DEPLOYMENT_NAME
      #   kubectl create service nodeport $DEPLOYMENT_NAME --tcp=80:$PORT --dry-run -o yaml > service.yaml
      #   kubectl apply -f service.yaml
      #   kubectl get services -o wide
