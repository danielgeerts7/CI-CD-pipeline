name: Continuous Deployment (IKS)

on:
  workflow_run:
    workflows: ["Cloud setup (Terraform)"] # Only trigger, when the Orchestration (Terraform) workflow succeeded
    types:
      - completed

# Environment variables available to all jobs and steps in this workflow
env:
  GITHUB_SHA: ${{ github.sha }}
  IBM_CLOUD_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}
  IBM_CLOUD_REGION: ${{ secrets.IBM_CLOUD_REGION }}
  ICR_NAMESPACE: ${{ secrets.ICR_NAMESPACE }}
  REGISTRY_HOSTNAME: ${{ secrets.REGISTRY_HOSTNAME }}
  IMAGE_NAME: cicd-casestudy-app
  IKS_CLUSTER: ${{ secrets.CLUSTERNAME }}
  DEPLOYMENT_NAME: my-node-app
  PORT: 3000
  ACCESS_PORT: 32100

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: prod
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    # Download and Install IBM Cloud CLI
    - name: Install IBM Cloud CLI
      run: |
        curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
        ibmcloud --version
        ibmcloud config --check-version=false
        ibmcloud plugin install -f kubernetes-service
        ibmcloud plugin install -f container-registry

    # Authenticate with IBM Cloud CLI
    - name: Authenticate with IBM Cloud CLI
      run: |
        ibmcloud login --apikey "${IBM_CLOUD_API_KEY}" -r "${IBM_CLOUD_REGION}"
        ibmcloud cr region-set "${IBM_CLOUD_REGION}"
        ibmcloud cr login

    # Build the Docker image
    - name: Build with Docker
      run: |
        cd app
        docker build -f Dockerfile -t "$REGISTRY_HOSTNAME"/"$ICR_NAMESPACE"/"$IMAGE_NAME":"$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" .
        cd ..

    # Push the image to IBM Container Registry
    - name: Push the image to ICR
      run: |
        docker push $REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA

    # Deploy the Docker image to the IKS cluster
    - name: Deploy to IKS
      run: |
        ibmcloud ks cluster config --cluster $IKS_CLUSTER
        kubectl config current-context
        kubectl create deployment $DEPLOYMENT_NAME --image=$REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA --port=3000 --dry-run=client -o yaml > deployment.yaml
        echo "$(<deployment.yaml )"
        kubectl apply -f deployment.yaml
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl create service nodeport $DEPLOYMENT_NAME --tcp=$PORT:$PORT --dry-run=client -o yaml > service.yaml
        echo "$(<service.yaml )"
        kubectl apply -f service.yaml
        kubectl get services -o wide
        
#        ibmcloud ks cluster config --cluster $IKS_CLUSTER
#        kubectl config current-context
#        kubectl apply -f deployment.yml
#        kubectl rollout status deployment/$DEPLOYMENT_NAME
#        kubectl apply -f service.yml
#        kubectl get services -o wide
